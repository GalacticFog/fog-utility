#!/usr/bin/env node
'use strict';

const displayResource = require('./lib/displayResourceUI');
const gestaltState = require('./lib/gestalt-state');
const argv = require('yargs').argv
const chalk = require('chalk')

// Check for arguments
if (argv._.length == 0) {
    console.error(`Usage: ${argv['$0']} <cluster identifier>`);
    return
}

function selectContainer(callback) {
    const selectContainer = require('./lib/selectContainer');

    selectContainer.run((result) => {
        console.log();
        console.log(`${result.name} selected.`);
        console.log();

        callback(null, result);
    });
}

function selectContainerPort(container, callback) {
    const selectContainerPort = require('./lib/selectContainerPort');

    selectContainerPort.run(container, (result) => {
        console.log();
        console.log(`${result.name} selected.`);
        console.log();

        callback(null, result);
    });
}


function selectELB(key, callback) {
    const selectAmazonELB = require('./lib/selectAmazonELB');

    console.log("Reading ELB information...")
    selectAmazonELB.getElbs(key, (err, lbs) => {

        selectAmazonELB.run(lbs, (result) => {
            console.log();
            console.log(`${result.name} selected.`);
            console.log();
    
            callback(null, result);
        });    
    });
}

function getUserInput(callback) {

}


function execute(callback) {

}

const key = argv._[0];

// Main

// 1 - Select container to expose
selectContainer((err, container) => {

    // 2 - Select ports to expose
    selectContainerPort(container, (err, port) => {

        // 3 - Select ELB to expose to
        selectELB(key, (err, elb) => {

            // 4 - for each container node port, allow setting the port, protocol
            getUserInput((err, input) => {

                const params = {
                    elb: elb,
                    container: container,
                    port: port,
                    // lbPort = input.lbPort
                }

                // Perform the execution
                execute(params, (err, result) => {

                    console.log(result);

                });
            });
        });
    });
});
