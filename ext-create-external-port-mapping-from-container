#!/usr/bin/env node
'use strict';
const argv = require('yargs').argv
// Check for arguments
if (argv._.length == 0) {
    console.error(`Usage: ${argv['$0']} <cluster identifier>`);
    return
}
const key = argv._[0];

const displayResource = require('./lib/displayResourceUI');
const displayAmazon = require('./lib/displayAmazon');
const gestaltState = require('./lib/gestalt-state');
const selectContainer = require('./lib/selectContainer');
const selectContainerPort = require('./lib/selectContainerPort');
const awsHelper = require('./lib/gestalt-aws-helper');
const chalk = require('chalk')
const inquirer = require('inquirer');

// Main
const aws = awsHelper.getAwsClient(key);

// 1 - Select container to expose
doSelectContainer((err, container) => {
    if (err) {
        console.error(chalk.red(`Error: ${err.message}`));
        return;
    }

    // 2 - Select ports to expose
    doSelectContainerPort(container, (result) => {
        if (!result.service_port) {
            console.error("No service port found on container, aborting.");
            return;
        }

        // 3 - Select ELB to expose to
        selectELB((err, elb) => {
            if (err) {
                console.error(chalk.red(`Error: ${err.message}`));
                return;
            }

            // Show ELB Details
            displayAmazon.displayDetails(elb);

            // Collect user input
            getUserInput((err, input) => {
                if (err) {
                    console.error(chalk.red(`Error: ${err.message}`));
                    return;
                }

                const params = {
                    elb: elb,
                    container: container,
                    listener: {
                        InstancePort: result.service_port,
                        InstanceProtocol: 'TCP',
                        LoadBalancerPort: input.port,
                        Protocol: 'TCP'
                    }
                };

                // Display summary to the user before executing
                summarizeAndConfirm(params, () => {

                    // Confirmed, perform the execution
                    execute(params, (err, result) => {
                        if (err) {
                            console.error(chalk.red(`Error: ${err.message}`));
                            return;
                        }

                        console.log(chalk.bold.green("Added listener."));
                        showResults(key, elb);

                        // setTimeout(function () {
                        //     console.log(chalk.bold.green("Added listener."));
                        //     showResults(key, elb);
                        // }, 1000);
                    });
                });
            });
        });
    });
});

// ----------------------------

function showResults(key, elb) {
    // Show the result
    aws.describeLoadBalancer(elb.LoadBalancerName, (err, result) => {
        if (err) {
            console.error(err);
            return;
        }

        // Show the result

        console.log();
        console.log(chalk.bold.underline(`Services Exposed on '${key}' Cluster ELBs`))

        // Show ELB Details
        displayAmazon.displayDetails(result);
    });
}

function doSelectContainer(callback) {

    selectContainer.run({}, (result) => {
        console.log();
        console.log(`${result.name} selected.`);
        console.log();

        callback(null, result);
    });
}

function doSelectContainerPort(container, callback) {

    selectContainerPort.run(container, (result) => {
        console.log();
        console.log(`${result.name} selected.`);
        console.log();

        callback(result);
    });
}

function selectELB(callback) {

    console.log("Reading ELB information...")
    aws.describeLoadBalancers((err, lbs) => {

        awsHelper.selectElb(lbs, (result) => {
            console.log();
            console.log(`${result.LoadBalancerName} selected.`);
            console.log();

            callback(null, result);
        });
    });
}

function getUserInput(callback) {
    const questions = [
        {
            message: "New ELB Port to Expose",
            type: 'input',
            name: 'port',
        },
    ];

    inquirer.prompt(questions).then(answers => {
        callback(null, answers);
    });
}


function summarizeAndConfirm(params, callback) {

    // console.log(JSON.stringify(params, null, 2));

    console.log();
    console.log(chalk.bold(`The following listener will be added to ELB ${chalk.green(params.elb.LoadBalancerName)}:`));

    displayAction(params);

    // Prompt to continue
    const questions = [
        {
            message: "Proceed to add ELB listener?",
            type: 'confirm',
            name: 'confirm',
            default: false
        },
    ];

    inquirer.prompt(questions).then(answers => {
        const contents = JSON.stringify(answers, null, '  ');

        if (answers.confirm) {
            callback();
        } else {
            console.log("Aborted.")
        }
    });
}

function displayAction(params) {
    const resources = [{
        listener: params.listener,
        LoadBalancerName: params.elb.LoadBalancerName
    }];
    const options = {
        headers: ['LB Name', 'LB Port', 'LB Protocol', 'Cluster Port', 'Cluster Protocol'],
        fields: ['LoadBalancerName', 'listener.LoadBalancerPort', 'listener.Protocol', 'listener.InstancePort', 'listener.InstanceProtocol'],
        // sortField: 'LoadBalancerPort',
        emptyString: '-'
    }
    displayResource.run(options, resources);
}

function execute(params, callback) {
    aws.createLoadBalancerListener(params.elb.LoadBalancerName, params.listener, callback);
}
