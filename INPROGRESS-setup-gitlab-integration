#!/usr/bin/env node
const argv = require('yargs').argv
const gestalt = require('./lib/gestalt')
const gestaltState = require('./lib/gestalt-state')
const gitlab = require('./lib/gestalt-gitlab-client');
const fs = require('fs');
const selectGestaltContext = require('./lib/selectOrgWorkspaceEnvironment');

const project = {
    name: 'esonchaiwanich/dummy-app-for-deploy-to-gestalt'
};

function doGetProjects(callback) {
    gitlab.listPrivateProjects((err, result) => {
        console.log(err);
        console.log(result);

        if (!err) {
            selectGitlabProject(result, callback);
        }
    });
}

function selectGitlabProject(result, callback) {
    const selectResource = require('./lib/selectResourceUI');
    const options = {
        mode: 'autocomplete',
        message: "Gitlab Projects",
        fields: ['name_with_namespace', 'description_truncated'],
        sortBy: 'name_with_namespace',
        fetchFunction: () => {
            return result;
        }
    }

    result.map(r => {
        const width = 100;
        r.description_truncated = r.description;
        if (String(r.description_truncated).length > width) {
            r.description_truncated = `${String(r.description).substring(0, width)}...`;
        }
    });

    selectResource.run(options, (selection) => {
        callback(null, selection)
    });
}

function doGetVarables() {
    const variable = {
        key: "TEST_3",
        value: "The letter F"
    }

    console.log("Setting...");

    // gitlab.getProjectVariables(project, (err, result) => {
    //     console.log(project)
    //     console.log(err);
    //     console.log(result);
    // });

    gitlab.createOrUpdateProjectVariable(project, variable, (err, result) => {

        // console.log(err);
        console.log(result);

        console.log("Fetching...");

        gitlab.getProjectVariables(project, (err, result) => {

            // console.log(err);
            console.log(result);

        });
    });
}

function doSetupGitlabProject(project, environment, callback) {
    // Set up Gitlab Project with the following:

    // GF_TARGET_ENV_UUID
    // GF_TARGET_ORG_NAME
    // GITLAB_PROJECT_ID
    // GITLAB_PROJECT_NAME

    // Create and checkin .gitlab-ci.yaml
}

//
// Main
//

// 1) Choose a Gitlab Project
doGetProjects((err, project) => {

    // 2) Choose a Gestalt Environment
    selectGestaltContext.run(context => {

        const env = context.environment;

        console.log(context);


        // 3) Summarize and confirm

        doSummarize((go) => {
            if (go) {
                // 4) Execute

                doSetupGitlabProject(project, context.environment, (result) => {

                });
            }
        });
    });
});



