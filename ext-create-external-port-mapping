#!/usr/bin/env node
'use strict';
const argv = require('yargs')
    // .demandCommand(1)
    // .usage('Usage: $0 <cluster name>            Interactive mode')
    // .usage('Usage: $0 <cluster name> [options]')
    // .example('$0 test --elb=fog-dev --ext 9900 --int 30000')
    // .describe('elb', 'ELB name')
    // .describe('ext', 'external TCP port')
    // .describe('int', 'internal TCP port')
    // .help('help')
    .argv;

// Check for arguments
if (argv._.length == 0) {
    console.error(`Usage: ${argv['$0']} <cluster identifier>`);
    return
}
const key = argv._[0];

const displayResource = require('./lib/displayResourceUI');
const displayAmazon = require('./lib/displayAmazon');
const gestaltState = require('./lib/gestalt-state');
const awsHelper = require('./lib/gestalt-aws-helper');
const chalk = require('chalk')
const inquirer = require('inquirer');

// console.log(argv)

// { _: [ 'test' ],
// help: false,
// version: false,
// elb: 'my-elb',
// eport: 9900,
// iport: 30000,
// '$0': 'ext-create-external-port-mapping' }

// return



// Main
const aws = awsHelper.getAwsClient(key);

// 3 - Select ELB to expose to
selectELB((err, elb) => {
    if (err) {
        console.error(chalk.red(`Error: ${err.message}`));
        return;
    }

    // Show ELB Details
    displayAmazon.displayDetails(elb);

    // Collect user input
    getUserInput(input => {
        const externalPort = input.port;

        getUserInput2(input => {
            const internalPort = input.port;

            const params = {
                elb: elb,
                listener: {
                    InstancePort: internalPort,
                    InstanceProtocol: 'TCP',
                    LoadBalancerPort: externalPort,
                    Protocol: 'TCP'
                }
            };

            // Display summary to the user before executing
            summarizeAndConfirm(params, () => {

                // Confirmed, perform the execution
                execute(params, (err, result) => {
                    if (err) {
                        console.error(chalk.red(`Error: ${err.message}`));
                        return;
                    }

                    console.log(chalk.bold.green("Added listener."));
                    showResults(key, elb);
                });
            });
        });
    });
});


// ----------------------------

function showResults(key, elb) {
    // Show the result
    aws.describeLoadBalancer(elb.LoadBalancerName, (err, result) => {
        if (err) {
            console.error(err);
            return;
        }

        // Show the result

        console.log();
        console.log(chalk.bold.underline(`Services Exposed on '${key}' Cluster ELBs`))

        // Show ELB Details
        displayAmazon.displayDetails(result);
    });
}

function selectELB(callback) {

    console.log("Reading ELB information...")
    aws.describeLoadBalancers((err, lbs) => {

        awsHelper.selectElb(lbs, (result) => {
            console.log();
            console.log(`${result.LoadBalancerName} selected.`);
            console.log();

            callback(null, result);
        });
    });
}

function getUserInput(callback) {
    const questions = [
        {
            message: "New ELB Port to Expose",
            type: 'input',
            name: 'port',
        },
    ];

    inquirer.prompt(questions).then(answers => {
        callback(answers);
    });
}


function getUserInput2(callback) {
    const questions = [
        {
            message: "Instance Port to Expose",
            type: 'input',
            name: 'port',
        },
    ];

    inquirer.prompt(questions).then(answers => {
        callback(answers);
    });
}

function summarizeAndConfirm(params, callback) {

    // console.log(JSON.stringify(params, null, 2));

    console.log();
    console.log(chalk.bold(`The following listener will be added to ELB ${chalk.green(params.elb.LoadBalancerName)}:`));

    displayAction(params);

    // Prompt to continue
    const questions = [
        {
            message: "Proceed to add ELB listener?",
            type: 'confirm',
            name: 'confirm',
            default: false
        },
    ];

    inquirer.prompt(questions).then(answers => {
        const contents = JSON.stringify(answers, null, '  ');

        if (answers.confirm) {
            callback();
        } else {
            console.log("Aborted.")
        }
    });
}

function displayAction(params) {
    const resources = [{
        listener: params.listener,
        LoadBalancerName: params.elb.LoadBalancerName
    }];
    const options = {
        headers: ['LB Name', 'LB Port', 'LB Protocol', 'Cluster Port', 'Cluster Protocol'],
        fields: ['LoadBalancerName', 'listener.LoadBalancerPort', 'listener.Protocol', 'listener.InstancePort', 'listener.InstanceProtocol'],
        // sortField: 'LoadBalancerPort',
        emptyString: '-'
    }
    displayResource.run(options, resources);
}

function execute(params, callback) {
    aws.createLoadBalancerListener(params.elb.LoadBalancerName, params.listener, callback);
}
